version: 2.1

orbs:

  aws-cli: circleci/aws-cli@4.1.3
  terraform: circleci/terraform@3.2.1

parameters:
  run_prod_job:
    type: boolean
    default: false

  changeset:
    type: string
    default: ""

  commit_id:
    type: string
    default: ""

  plan:
    type: string
    default: ""

executors:
  ubuntu:
    machine:
      image: ubuntu-2204:current

jobs:
  show_changeset:
    executor: ubuntu
    resource_class: medium
    steps:
      - run: 
          name: show changeset and plan
          command: |
            echo "Changes to be deployed: "
            echo << pipeline.parameters.changeset >>
            echo "Plan to be deployed: "
            echo << pipeline.parameters.commit_id >>
  start_prod_job:
    docker:
      - image: cimg/base:2024.02
    environment:
      CHANGESET: " << pipeline.parameters.changeset >> "
      COMMIT_ID: " << pipeline.parameters.commit_id >> "
    steps:
      - aws-cli/setup
      - terraform/install
      - terraform/init
      - checkout
      - run:
          name: Get commit id
          command: | 
            # curl -L -o /usr/bin/jq.exe https://github.com/stedolan/jq/releases/latest/download/jq-win64.exe
            echo "Starting PRO codebuild with changeset: "
            echo << pipeline.parameters.changeset >>
            echo "Commit ID is ${COMMIT_ID}"
            echo "Assume Sec Role"
            aws sts assume-role-with-web-identity --region us-east-1 --role-arn "arn:aws:iam::357225030460:role/circleci-role" --role-session-name "demo" --web-identity-token $CIRCLE_OIDC_TOKEN --duration-seconds 3600 > /tmp/aws_credentials.json
            cat /tmp/aws_credentials.json
            export AWS_ACCESS_KEY_ID=$(jq -r .Credentials.AccessKeyId /tmp/aws_credentials.json)
            export AWS_SECRET_ACCESS_KEY=$(jq -r .Credentials.SecretAccessKey /tmp/aws_credentials.json)
            export AWS_SESSION_TOKEN=$(jq -r .Credentials.SessionToken /tmp/aws_credentials.json)
            rm /tmp/aws_credentials.json            
      - run:
          name: Terraform FMT
          command: | 
            terraform init
            terraform fmt
            terraform plan -input=false
            terraform apply


          
workflows:
  codepipeline:
    # when: << pipeline.parameters.run_prod_job >>
    jobs:
      - show_changeset
      - start_prod_job
      # - deploy:
      #     requires:
      #     - build
          # filters:
          #   branches:
          #     only: main